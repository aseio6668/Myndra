// Myndra Narrative DSL - Interactive Fiction with Living Animation
// Stories that breathe, characters that think, worlds that remember

import narrative with capabilities("story", "character", "causality", "memory")
import dialogue with capabilities("conversation", "emotion", "subtext")
import cinematography with capabilities("camera", "lighting", "composition")
import psychology with capabilities("personality", "motivation", "growth")

#tag:narrative-core
fn main() {
    // Create a living story world where narrative drives everything
    story_world library_of_forgotten_dreams {
        // The setting itself has memory and personality
        setting: {
            name: "The Eternal Library",
            personality: {
                wisdom: 0.9,
                mystery: 0.8,
                melancholy: 0.6,
                protectiveness: 0.7
            },
            
            // The library remembers every story ever told within it
            collective_memory: {
                all_conversations: [],
                emotional_resonances: {},
                forgotten_stories: infinite_archive(),
                visitor_impressions: associative_network()
            },
            
            // Setting reacts to narrative events
            @reactive
            fn respond_to_story_events() {
                match current_narrative_tension {
                    high => {
                        lighting.intensity -> 0.4 over 10s  // Dramatic shadows
                        ambient_sound -> "mysterious_whispers" over 5s
                        book_animation_frequency *= 1.5
                    },
                    
                    low => {
                        lighting.intensity -> 0.8 over 15s  // Gentle, warm
                        ambient_sound -> "peaceful_page_turning" over 8s
                        floating_dust_particles.calm_down()
                    },
                    
                    climactic => {
                        lighting.flicker_dramatically()
                        books.fly_off_shelves_in_excitement()
                        architecture.shift_to_emphasize_drama()
                    }
                }
            }
        }
    }
    
    create_narrative_characters()
    setup_interactive_dialogue_system()
    initialize_story_memory_system()
    start_narrative_engine()
}

#tag:narrative-characters
fn create_narrative_characters() {
    // The Librarian - a character with deep history and evolving personality
    librarian = narrative_character {
        name: "Iris Memoriam",
        
        // Rich psychological profile that affects all interactions
        psychology: {
            core_personality: {
                introversion: 0.8,      // Prefers books to people, usually
                intuition: 0.9,         // Sees patterns and deeper meanings
                thinking: 0.3,          // Makes decisions with heart over head
                judging: 0.7            // Likes structure and closure
            },
            
            // Personal history shapes current behavior
            backstory: {
                childhood: "raised_among_ancient_books",
                formative_experience: "discovered_a_book_that_spoke_back",
                greatest_fear: "stories_being_forgotten_forever",
                deepest_desire: "to_preserve_all_human_experience",
                secret_shame: "once_burned_a_book_in_anger",
                current_conflict: "duty_vs_personal_happiness"
            },
            
            // Emotional state evolves through conversations
            emotional_state: {
                baseline_mood: "contemplative_melancholy",
                current_emotions: {
                    loneliness: evolving(0.7),
                    curiosity: evolving(0.6),
                    protective_love: evolving(0.8),
                    hidden_joy: evolving(0.3),
                    fear_of_loss: evolving(0.5)
                },
                
                // Emotions change based on player interaction
                emotional_triggers: {
                    "player_shows_genuine_interest_in_books": {
                        curiosity += 0.2,
                        loneliness -= 0.3,
                        hidden_joy += 0.4
                    },
                    
                    "player_dismisses_importance_of_stories": {
                        protective_love += 0.3,
                        fear_of_loss += 0.2,
                        defensive_anger += 0.4
                    },
                    
                    "player_shares_personal_story": {
                        loneliness -= 0.5,
                        trust += 0.3,
                        empathetic_connection += 0.6
                    }
                }
            },
            
            // Character growth arc
            character_arc: {
                starting_point: "isolated_guardian_of_knowledge",
                potential_endings: [
                    "finds_peace_through_connection",
                    "embraces_role_as_story_keeper", 
                    "learns_to_let_go_and_live",
                    "becomes_bridge_between_worlds"
                ],
                
                growth_conditions: {
                    trust_building: requires_multiple_honest_conversations,
                    vulnerability_sharing: requires_player_reciprocity,
                    fear_confrontation: requires_story_related_crisis,
                    resolution: requires_meaningful_choice_from_player
                }
            }
        },
        
        // Visual representation that reflects inner state
        appearance: {
            base_form: load_character_model("librarian_iris.obj"),
            
            // Appearance changes with emotional state
            @reactive
            fn emotional_appearance_changes() {
                match dominant_emotion() {
                    "loneliness" => {
                        posture -> "slightly_hunched_protective" over 3s
                        eye_contact_frequency *= 0.7
                        personal_space_preference += 0.5
                    },
                    
                    "curiosity" => {
                        posture -> "alert_leaning_forward" over 2s
                        eye_brightness += 0.3
                        gesture_frequency *= 1.2
                    },
                    
                    "joy" => {
                        facial_expression -> "subtle_smile" over 1s
                        movement_lightness += 0.4
                        voice_pitch += 15.hz
                    },
                    
                    "protective_anger" => {
                        stance -> "firm_defensive" over 1s
                        gesture_sharpness += 0.5
                        voice_intensity += 0.3
                    }
                }
            },
            
            // Clothing and environment react to character state
            wardrobe: {
                base_outfit: "librarian_robes",
                
                // Clothes become more colorful as character opens up
                color_evolution: {
                    closed_off: color(0.3, 0.3, 0.4),    // Muted grays
                    warming_up: color(0.5, 0.4, 0.6),    // Soft purples
                    trusting: color(0.6, 0.7, 0.8),      // Gentle blues
                    joyful: color(0.8, 0.6, 0.4)         // Warm golds
                }
            }
        },
        
        // Dialogue system that reflects personality and state
        dialogue_system: {
            speaking_patterns: {
                introversion_effects: {
                    pause_before_speaking: personality.introversion * 2s,
                    prefers_meaningful_to_small_talk: true,
                    energy_drain_from_social_interaction: 0.1.per_minute
                },
                
                emotional_speech_patterns: {
                    loneliness: {
                        sentence_length: "tends_toward_longer_explanations",
                        topic_preference: "books_over_personal_experience",
                        voice_quality: "slightly_wistful"
                    },
                    
                    excitement: {
                        speech_rate: 1.3,
                        gesture_accompanying: true,
                        topic_jumping: "more_likely_to_digress"
                    }
                },
                
                knowledge_sharing_style: {
                    // How the character imparts information
                    prefers_stories_to_facts: true,
                    uses_metaphors_from_books: true,
                    tests_listener_understanding: occasionally,
                    reveals_personal_connection_to_knowledge: when_trust_high
                }
            }
        }
    }
    
    // The Books - characters in their own right
    living_books = []
    for i in 0..50 {
        let book = narrative_character sentient_book {
            title: generate_mysterious_book_title(),
            genre: choose_weighted([
                ("romance", 0.2),
                ("mystery", 0.25), 
                ("philosophy", 0.2),
                ("poetry", 0.15),
                ("autobiography", 0.1),
                ("forbidden_knowledge", 0.1)
            ]),
            
            // Each book has its own personality based on contents
            personality: derive_personality_from_genre(genre),
            
            // Books remember who has read them
            reader_memory: {
                past_readers: [],
                emotional_impact_on_readers: {},
                favorite_passages_requested: {},
                
                // Books form preferences about readers
                reader_compatibility: |potential_reader| {
                    calculate_narrative_resonance(
                        book.themes, 
                        potential_reader.personality,
                        potential_reader.life_experiences
                    )
                }
            },
            
            // Visual representation
            appearance: {
                physical_form: procedural_book_generator {
                    cover_art: generated_from_story_themes(book.themes),
                    wear_pattern: based_on_reading_history(book.reader_memory),
                    glow_intensity: emotional_resonance_with_current_environment(),
                    floating_behavior: personality_based_movement_style()
                }
            },
            
            // How the book communicates
            communication_style: {
                // Books communicate through imagery, not words
                primary_language: "symbolic_imagery",
                secondary_language: "emotional_resonance",
                emergency_language: "direct_text_on_pages",
                
                message_types: [
                    "memory_sharing",
                    "wisdom_offering",
                    "emotional_comfort",
                    "warning_or_caution",
                    "invitation_to_adventure"
                ]
            }
        }
        
        living_books.push(book)
    }
    
    // The Player Character - shaped by choices and interactions
    player_character = adaptive_protagonist {
        // Personality emerges from player choices
        personality_development: {
            trait_tracking: {
                empathy: measured_by_responses_to_character_emotions,
                curiosity: measured_by_exploration_and_questions,
                wisdom: measured_by_understanding_demonstrated,
                courage: measured_by_willingness_to_take_risks,
                patience: measured_by_time_spent_listening
            },
            
            // Player's developing personality affects available dialogue options
            @reactive
            fn update_available_dialogue_options() {
                dialogue_tree.filter_options(|option| {
                    option.empathy_requirement <= player.personality.empathy &&
                    option.wisdom_requirement <= player.personality.wisdom
                })
            }
        },
        
        // Player's impact on the story world
        narrative_influence: {
            // Choices create ripple effects
            choice_consequences: temporal_effect_system {
                immediate_effects: execute_instantly,
                short_term_effects: manifest_over_minutes,
                long_term_effects: unfold_over_story_arc,
                
                // Some consequences only become clear in retrospect
                delayed_understanding: reveal_connections_later
            }
        }
    }
}

#tag:dialogue-system
fn setup_interactive_dialogue_system() {
    // Advanced dialogue system with subtext and emotional layers
    dialogue_engine = {
        // Multi-layered conversation system
        conversation_layers: {
            surface_text: "what_characters_actually_say",
            subtext: "what_they_really_mean", 
            emotional_undertone: "how_they_feel_saying_it",
            body_language: "what_their_posture_communicates",
            environmental_response: "how_setting_reacts_to_conversation"
        },
        
        // Dynamic dialogue generation based on relationship state
        dialogue_generator: {
            relationship_awareness: {
                trust_level: measured_through_conversation_history,
                intimacy_level: measured_through_vulnerability_sharing,
                conflict_tension: measured_through_disagreements,
                shared_experiences: accumulated_through_story_events
            },
            
            // Conversation topics emerge from relationship state
            @reactive
            fn generate_available_topics() {
                let base_topics = ["library", "books", "stories"]
                let personal_topics = []
                let deep_topics = []
                
                if relationship.trust_level > 0.3 {
                    personal_topics = ["childhood", "fears", "dreams"]
                }
                
                if relationship.intimacy_level > 0.6 {
                    deep_topics = ["regrets", "secret_desires", "meaning_of_life"]
                }
                
                return base_topics + personal_topics + deep_topics
            }
        },
        
        // Conversation flow that feels natural
        conversation_flow: {
            // Pauses and timing matter
            natural_timing: {
                thinking_pause: personality.introversion * random_range(1s, 3s),
                emotional_pause: emotional_intensity * random_range(0.5s, 2s),
                comfortable_silence: relationship.intimacy_level * random_range(2s, 8s)
            },
            
            // Conversations can be interrupted and resumed
            interruption_handling: {
                environmental_interruptions: handle_gracefully,
                emotional_interruptions: "character_notices_and_responds",
                topic_drift: "allow_natural_conversation_evolution"
            },
            
            // Memory of past conversations
            conversation_memory: {
                remembers_what_player_said: true,
                remembers_how_player_said_it: true,
                refers_back_to_previous_conversations: occasionally,
                builds_on_established_relationship: always
            }
        }
    }
    
    // Specific conversation scenarios
    conversation_scenarios = {
        first_meeting: {
            librarian_goals: ["assess_visitor_intentions", "protect_library_secrets"],
            player_goals: ["learn_about_library", "understand_librarian"],
            
            conversation_arc: {
                opening: "cautious_polite_greeting",
                development: "gradual_warming_or_cooling_based_on_responses",
                climax: "moment_of_potential_connection_or_rejection", 
                resolution: "establishes_baseline_relationship"
            },
            
            branching_outcomes: [
                "librarian_becomes_protective_ally",
                "librarian_remains_cautiously_neutral",
                "librarian_becomes_suspicious_and_distant"
            ]
        },
        
        crisis_conversation: {
            // When a book goes missing or is damaged
            setup: "something_precious_to_librarian_is_threatened",
            librarian_emotional_state: "heightened_protectiveness_and_fear",
            
            // Player's response determines relationship trajectory
            critical_choice_point: {
                empathetic_response: "deepens_trust_and_connection",
                practical_response: "maintains_but_doesnt_deepen_relationship",
                dismissive_response: "creates_lasting_hurt_and_distance"
            }
        },
        
        revelation_conversation: {
            // When librarian shares something deeply personal
            preconditions: {
                trust_level: > 0.7,
                previous_vulnerability: player_has_shared_something_personal,
                emotional_safety: no_recent_conflicts
            },
            
            revelation_content: choose_based_on_relationship_themes([
                "why_librarian_chose_solitude",
                "the_book_that_changed_everything", 
                "fear_of_being_forgotten",
                "secret_dream_of_connection"
            ]),
            
            // This conversation can fundamentally change the relationship
            potential_outcomes: [
                "deep_mutual_understanding",
                "player_overwhelmed_by_intimacy",
                "librarian_regrets_sharing",
                "breakthrough_to_new_relationship_level"
            ]
        }
    }
}

#tag:story-memory
fn initialize_story_memory_system() {
    // The world remembers everything and learns from it
    narrative_memory_system = {
        // Different types of memory with different persistence
        memory_types: {
            episodic_memory: {
                // Specific events and when they happened
                events: [],
                emotional_context: {},
                participants: {},
                
                // Some memories fade, others become more significant
                memory_evolution: {
                    traumatic_events: "become_more_vivid_over_time",
                    joyful_events: "take_on_golden_glow",
                    routine_events: "fade_unless_emotionally_significant"
                }
            },
            
            semantic_memory: {
                // General knowledge about the world and relationships
                character_knowledge: "what_characters_know_about_each_other",
                world_knowledge: "understanding_of_how_this_world_works",
                story_patterns: "recognition_of_recurring_themes"
            },
            
            emotional_memory: {
                // How events felt, separate from what happened
                emotional_associations: {},
                trauma_markers: [],
                joy_anchors: [],
                
                // Emotional memories influence current reactions
                @reactive
                fn emotional_memory_influence() {
                    if current_situation.similar_to(past_trauma) {
                        increase_character_defensiveness()
                        add_tension_to_environment()
                    }
                    
                    if current_situation.similar_to(past_joy) {
                        increase_character_openness()
                        warm_environmental_lighting()
                    }
                }
            },
            
            collective_memory: {
                // Shared memories between characters
                shared_experiences: {},
                cultural_memories: "stories_passed_down_through_generations",
                archetypal_memories: "deep_human_universal_experiences"
            }
        },
        
        // Memory affects current narrative possibilities
        memory_influenced_storytelling: {
            // Past events create narrative momentum
            narrative_threads: {
                unresolved_conflicts: "seek_resolution",
                planted_seeds: "grow_into_story_elements",
                character_promises: "create_obligation_for_follow_through",
                mysterious_elements: "demand_eventual_explanation"
            },
            
            // Characters remember and reference past events
            character_memory_behavior: {
                brings_up_past_conversations: when_relevant,
                holds_grudges_or_gratitude: based_on_emotional_impact,
                learns_from_past_mistakes: gradual_personality_evolution,
                builds_on_established_trust: deepening_intimacy_over_time
            }
        }
    }
    
    // Story events create lasting changes
    permanent_consequence_system = {
        // Some choices permanently alter the world
        irreversible_changes: {
            character_death: "removes_character_but_leaves_memory_and_influence",
            destroyed_objects: "gone_forever_but_impact_remains",
            revealed_secrets: "cant_be_unknown_affects_all_future_interactions",
            broken_trust: "difficult_to_repair_changes_relationship_dynamics"
        },
        
        // The world learns and adapts
        world_evolution: {
            // Characters grow and change based on experiences
            character_development: continuous_based_on_story_events,
            
            // Setting evolves to reflect narrative themes
            environmental_evolution: {
                library_organization: reflects_librarians_mental_state,
                lighting_patterns: influenced_by_emotional_history,
                book_accessibility: changes_based_on_trust_relationships
            }
        }
    }
}

#tag:cinematography-system
// Cinematic storytelling through dynamic camera and lighting
cinematography_system = {
    // Camera as storyteller
    narrative_camera: {
        // Camera work reflects story beats
        shot_composition: {
            establishing_shots: "when_introducing_new_story_elements",
            close_ups: "during_emotional_intimacy",
            medium_shots: "for_most_dialogue",
            wide_shots: "to_show_isolation_or_grandeur",
            
            // Advanced compositions
            over_shoulder: "creates_intimacy_and_identification",
            dutch_angles: "during_psychological_tension",
            symmetrical_framing: "for_moments_of_balance_or_decision"
        },
        
        // Camera movement tells story
        camera_movement_language: {
            slow_push_in: "building_tension_or_intimacy",
            pull_back_reveal: "showing_larger_context_or_isolation",
            tracking_shot: "following_character_journey",
            handheld_shake: "emotional_instability_or_urgency",
            steady_glide: "supernatural_or_omniscient_perspective"
        },
        
        // Focus and depth of field as narrative tool
        focus_storytelling: {
            shallow_depth: "isolates_subject_creates_intimacy",
            deep_focus: "shows_multiple_story_layers_simultaneously",
            rack_focus: "shifts_attention_reveals_connections",
            focus_pull: "guides_viewer_attention_through_scene"
        }
    },
    
    // Lighting as emotion
    narrative_lighting: {
        // Lighting reflects and influences mood
        emotional_lighting_palette: {
            hope: "warm_golden_light_from_above",
            despair: "cool_blue_shadows_from_below",
            mystery: "dramatic_chiaroscuro_contrasts",
            intimacy: "soft_warm_side_lighting",
            conflict: "harsh_opposing_light_sources"
        },
        
        // Dynamic lighting changes
        @reactive
        fn lighting_responds_to_story() {
            match current_story_beat {
                "character_revelation" => {
                    // Warm light gradually illuminates speaker
                    add_rim_light(character: current_speaker, color: warm_white)
                    dim_environmental_lights(to: 0.3, duration: 2s)
                },
                
                "conflict_escalation" => {
                    // Harsh, contrasting lights
                    create_opposing_key_lights(characters: conflict_participants)
                    remove_fill_lighting()
                    increase_shadow_contrast()
                },
                
                "moment_of_understanding" => {
                    // Soft, enveloping light
                    create_gentle_wrap_around_lighting()
                    warm_color_temperature += 500.kelvin over 3s
                },
                
                "mystery_deepens" => {
                    // Atmospheric, directional lighting
                    create_dramatic_shadow_patterns()
                    add_volumetric_fog_for_mystery()
                    cool_color_temperature -= 800.kelvin over 5s
                }
            }
        }
    }
}

#tag:interactive-story-engine
// The engine that weaves all elements together
interactive_story_engine = {
    // Story state management
    narrative_state: {
        current_act: 1,
        story_tension_level: evolving(0.1),
        relationship_network: dynamic_graph_of_character_connections,
        unresolved_plot_threads: [],
        
        // Story momentum 
        narrative_momentum: {
            direction: "toward_character_growth_and_understanding",
            speed: "determined_by_player_engagement",
            obstacles: "internal_and_external_conflicts"
        }
    },
    
    // Story generation and adaptation
    adaptive_storytelling: {
        // Story adapts to player personality and choices
        @reactive 
        fn adapt_story_to_player() {
            if player.personality.empathy > 0.7 {
                // Empathetic players get more character-focused stories
                increase_character_development_opportunities()
                create_situations_requiring_emotional_intelligence()
            }
            
            if player.personality.curiosity > 0.8 {
                // Curious players get more mysteries and secrets
                plant_intriguing_story_seeds()
                create_discoverable_hidden_elements()
            }
            
            if player.patience > 0.6 {
                // Patient players can handle slower, deeper character development
                allow_longer_conversation_sequences()
                include_contemplative_story_moments()
            }
        },
        
        // Story learns from player preferences
        preference_learning: {
            tracks_player_choices: "what_dialogue_options_chosen_most",
            observes_player_behavior: "how_long_spent_with_different_characters",
            notes_emotional_responses: "which_story_moments_had_strongest_impact",
            
            uses_learning_to_shape_future_content: true
        }
    },
    
    // Multiple story threads weaving together
    narrative_threading: {
        main_storyline: "player_and_librarian_relationship_development",
        
        subplots: [
            "mystery_of_the_missing_book",
            "the_book_that_chooses_its_reader", 
            "the_library's_secret_history",
            "the_cost_of_knowledge"
        ],
        
        // Threads interweave based on player choices and timing
        thread_intersection_points: [
            "when_player_gains_librarian_trust",
            "when_missing_book_mystery_deepens",
            "when_player_must_choose_between_competing_loyalties",
            "when_the_true_nature_of_the_library_is_revealed"
        ],
        
        // Multiple possible endings based on accumulated choices
        ending_possibilities: [
            "player_becomes_apprentice_librarian",
            "player_helps_librarian_reconnect_with_world",
            "player_and_librarian_preserve_library_together",
            "player_learns_to_value_stories_and_returns_to_life_enriched",
            "tragic_ending_where_understanding_comes_too_late"
        ]
    }
}

// Start the interactive narrative experience
begin_story("The Library of Forgotten Dreams")
initialize_character_relationships()
enter_narrative_loop()